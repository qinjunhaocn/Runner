plugins {
    alias(libs.plugins.android.library)
}

android {
    namespace "${project.properties.applicationId}.info"
    compileSdk project.properties.compileSdkVersion.toInteger()

    defaultConfig {
        minSdk project.properties.minSdkVersion.toInteger()
        targetSdk project.properties.targetSdkVersion.toInteger()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

dependencies {
}
android.libraryVariants.all {
    String variantCapped = name.substring(0, 1).toUpperCase() + name.substring(1)
    var variantLowered = name

    var outSrcDir =
            layout.buildDirectory.dir("generated/source/Info/${variantLowered}").get()
    var signInfoTask = tasks.register("generate${variantCapped}Info") {
        dependsOn(":app:validateSigning${variantCapped}")
        var outSrc = file("$outSrcDir/" + "${project.properties.applicationId}.info".replaceAll(".", "/") + "/Info.java")
        outputs.file(outSrc)
        doLast {
            outSrc.parentFile.mkdirs()
            var uuid = UUID.randomUUID().toString()
            new PrintStream(outSrc).print(
                    """
                    package ${project.properties.applicationId}.info;
                    public final class Info {
                        public static final boolean DEBUG = ${name == "debug" ? "true" : "false"};
                        public static final String APPLICATION_ID = "${project.properties.applicationId}";
                        public static final int VERSION_CODE = ${project.properties.versionCode};
                        public static final String VERSION_NAME = "${project.properties.versionName}";
                        public static final String CLI_UUID = "$uuid";
                        public static final boolean ENABLE_LOGGER = ${project.properties.enableLogger};
                    }
                    """
            )
        }
    }
    registerJavaGeneratingTask(signInfoTask, outSrcDir.asFile)
}