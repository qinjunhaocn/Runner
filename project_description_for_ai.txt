这是一个 Android App 项目
使用 Gradle 构建系统，Gradle 脚本语言为 Kotlin
主要使用语言为 Kotlin
布局文件使用 XML 格式
目标 SDK 36；最低 SDK 24
该项目使用的 AndroidX 库为第三方分支————RikkaX
遵循 Material Design 3 设计规范
部分功能需要特权，所以使用了 Shizuku API

本 App 旨在提供一个简单的方式用来帮助用户快速使用 Shizuku 的特权执行一些简单的 shell 命令，也允许储存这些命令以便于快速执行。
同时 App 也允许对执行时的 shell 环境进行一些修改，例如配置环境变量、侧载其他可执行文件等。
为了保证安全，App 同时支持进程查看，允许用户查看通过本 App 启动的进程，并允许用户终止这些进程。

本 App 分为两部分：
1. App：提供了一个简单的界面，允许用户输入命令、查看进程等，同时储存简单的命令与用户对环境变量的修改。
2. Server：运行在 Shizuku 特权下，允许 App 与其进行通信（AIDL），并执行特权操作。

Server 部分主要位于 yangfentuozi.runner.server 包下，包含了以下几个重要包：
.callback 为 AIDL 回调接口以及其包装器，包装器主要是用来实现无 RemoteException 执行 AIDL 接口，无需查看。
.fakecontext 为伪 Context 类，主要用于在特权进程下使用简单的 Context，虽说是 Context，但其功能极其有限，尽量避免使用。
.util 为一些工具类，提供了一些通用的功能，目前只有“通过 JNI 访问进程列表”的工具类。
ServerMain 类为服务入口，实现了 AIDL 接口，主要用于初始化在 Shizuku 特权模式下 App 的数据目录（/data/local/tmp/runner），并负责处理客户端响应。
请永远记住：yangfentuozi.runner.server.ServerMain 永远会运行在 Shizuku 特权下，其 UID 为 2000（shell）或 0（root）。

App 部分主要位于 yangfentuozi.runner.app 包下，包含了以下几个重要包：
.service 为 App 在 AndroidManifest.xml 中声明的服务，其 ExecOnBootService 类主要用于开机自启动执行命令。
.base 为 App 的基类，提供了一些通用的功能。
.receiver 为 App 的广播接收器，主要用于开机时启动 ExecOnBootService 服务实现开机执行命令。
.data 为数据库相关代码，使用了 Android 原生的 SQLite3 数据库。
.ui 为 App 的界面相关代码，包含了 Activity、Fragment、Dialog 等。
.util 为 App 的工具类，提供了一些通用的功能，例如主题、异常、App 更新等。
App 类为 App 的 Application 类，负责处理 App 的生命周期。
Runner 类为处理 Shizuku 权限与绑定特权 Service 的类，提供获取 Shizuku 权限、获取特权 Service Binder 等功能。

yangfentuozi.runner.shared 包为一些 App 与 Server 共享的代码，主要包括：
.data 为可序列化数据类，主要用于传递数据。
